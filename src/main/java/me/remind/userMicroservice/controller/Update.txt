Update (CrudRepository was updated)


@RestController
public class UserController {

	@Autowired
	private UserService userService;

	@RequestMapping(value = { "/users", "/users/" }, method = RequestMethod.GET)
	public ResponseEntity<Iterable<User>> findAll() {
		return new ResponseEntity<Iterable<User>>(userService.findAll(), HttpStatus.OK);
	}

	@RequestMapping(value = "/users/{id}", method = RequestMethod.GET)
	public ResponseEntity<Optional<User>> findById(@PathVariable("id") Long id) {
		return new ResponseEntity<Optional<User>>(userService.findById(id), HttpStatus.FOUND);
	}

	@RequestMapping(value = { "/users", "/users/" }, method = RequestMethod.DELETE)
	public HttpStatus deleteAll() {
		userService.deleteAll();
		return HttpStatus.OK;
	}

	@RequestMapping(value = "/users/{id}", method = RequestMethod.DELETE)
	public HttpStatus deleteById(@PathVariable("id") Long id) {
		if (userService.existsById(id)) {
			userService.deleteById(id);
			return HttpStatus.OK;
		} else {
			return HttpStatus.NO_CONTENT;
		}
	}
	
	@RequestMapping(value = { "/users", "/users/" }, method = RequestMethod.POST)
	public ResponseEntity<User> createUser(@RequestBody User user) {
		return new ResponseEntity<User>(userService.save(user), HttpStatus.CREATED);
	}
	
	@PutMapping(value = "/users/{id}")
	public ResponseEntity<User> editUser(@PathVariable("id") Long id, @RequestBody User user) {
		return new ResponseEntity<User>(userService.save(user), HttpStatus.OK);
	}
	
}
